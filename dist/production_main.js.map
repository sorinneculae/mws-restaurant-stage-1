{"version":3,"sources":["../js/production_main.js"],"names":["DBHelper","callback","fetch","DATABASE_URL","then","response","ok","json","status","catch","id","cuisine","fetchRestaurants","error","restaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","restaurant","type","marker","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","port","markers","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","option","createElement","innerHTML","value","append","fillCuisinesHTML","window","initMap","loc","lat","lng","Map","zoom","center","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","m","setMap","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","srcset","sizes","alt","tabIndex","address","more","href","mapMarkerForRestaurant","addListener","location","push","initSW","navigator","serviceWorker","register","log"],"mappings":"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","file":"production_main.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    // let xhr = new XMLHttpRequest();\r\n    // xhr.open('GET', DBHelper.DATABASE_URL);\r\n    // xhr.onload = () => {\r\n    //   if (xhr.status === 200) { // Got a success response from server!\r\n    //     const json = JSON.parse(xhr.responseText);\r\n    //     const restaurants = json.restaurants;\r\n    //     callback(null, restaurants);\r\n    //   } else { // Oops!. Got an error from server.\r\n    //     const error = (`Request failed. Returned status of ${xhr.status}`);\r\n    //     callback(error, null);\r\n    //   }\r\n    // };\r\n    // xhr.send();\r\n    fetch(DBHelper.DATABASE_URL)\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        } else {\r\n          return callback(`Request failed. Returned status of ${response.status}`, null);\r\n        }\r\n      })\r\n      .then(response => callback(null, response))\r\n      .catch(error => callback(`Request failed`, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.DATABASE_URL}/${id}`)\r\n      .then(response => response.json())\r\n      .then(response => callback(null, response))\r\n      .catch(error => callback(`Restaurant does not exist`, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant, type) {\r\n    return (`/img/${restaurant.id}${type != '' ? '-' : ''}${type}.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n;let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nlet fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nlet fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nlet fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nlet fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nwindow.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false,\r\n    title: 'Google Maps'\r\n  });\r\n  updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nlet updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\n\r\n let resetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  self.markers.forEach(m => m.setMap(null));\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nlet fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nlet createRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n  // const imageLink = document.createElement('a');\r\n  // imageLink.className = 'restaurant-img-link';\r\n  // imageLink.href = DBHelper.urlForRestaurant(restaurant);\r\n  // li.append(imageLink);\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant, 'default');\r\n  image.srcset = `${DBHelper.imageUrlForRestaurant(restaurant, 'small')} 325w, ${DBHelper.imageUrlForRestaurant(restaurant, 'medium')} 500w, ${DBHelper.imageUrlForRestaurant(restaurant, '')} 800w`\r\n  image.sizes = '(min-width: 768px) calc( 100vw / 2 - 100px ), (min-width: 1200px) calc( 100vw / 3 - 100px ), (min-width: 1920px) calc( 100vw / 4 - 100px )';\r\n  image.alt = `${restaurant.name} Restaurant in ${restaurant.neighborhood}`;\r\n  image.tabIndex = 0;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  name.tabIndex = 0;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  neighborhood.tabIndex = 0;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  address.tabIndex = 0;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nlet addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n};window.addEventListener('load', () => initSW());\n\nlet initSW = () => {\n  if (!navigator.serviceWorker) return;\n\n  navigator.serviceWorker.register('/sw.js').then( () => {\n    console.log('SW is working! ----- ');\n  }).catch( () => {\n    console.log('SW reg failed!');\n  });\n}"]}