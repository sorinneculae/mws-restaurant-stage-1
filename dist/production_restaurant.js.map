{"version":3,"sources":["../js/production_restaurant.js"],"names":["DBHelper","callback","fetch","DATABASE_URL","then","response","ok","json","status","catch","id","cuisine","fetchRestaurants","error","restaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","restaurant","type","marker","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","port","window","initMap","fetchRestaurantFromURL","console","self","Map","document","getElementById","zoom","center","scrollwheel","fillBreadcrumb","mapMarkerForRestaurant","addEventListener","initSW","navigator","serviceWorker","register","log","getParameterByName","fetchRestaurantById","fillRestaurantHTML","innerHTML","address","image","className","src","imageUrlForRestaurant","srcset","sizes","alt","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","tabIndex","day","appendChild","time","reviews","container","noReviews","ul","forEach","createReviewHTML","review","li","name_date","date","rating","comments","breadcrumb","location","href","replace","regex","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"production_restaurant.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    // let xhr = new XMLHttpRequest();\r\n    // xhr.open('GET', DBHelper.DATABASE_URL);\r\n    // xhr.onload = () => {\r\n    //   if (xhr.status === 200) { // Got a success response from server!\r\n    //     const json = JSON.parse(xhr.responseText);\r\n    //     const restaurants = json.restaurants;\r\n    //     callback(null, restaurants);\r\n    //   } else { // Oops!. Got an error from server.\r\n    //     const error = (`Request failed. Returned status of ${xhr.status}`);\r\n    //     callback(error, null);\r\n    //   }\r\n    // };\r\n    // xhr.send();\r\n    fetch(DBHelper.DATABASE_URL)\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        } else {\r\n          return callback(`Request failed. Returned status of ${response.status}`, null);\r\n        }\r\n      })\r\n      .then(response => callback(null, response))\r\n      .catch(error => callback(`Request failed`, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.DATABASE_URL}/${id}`)\r\n      .then(response => response.json())\r\n      .then(response => callback(null, response))\r\n      .catch(error => callback(`Restaurant does not exist`, null));\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant, type) {\r\n    return (`/img/${restaurant.id}${type != '' ? '-' : ''}${type}.jpg`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n}\r\n;let restaurant;\nvar map;\n\n/**\n * Initialize Google map, called from HTML.\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\nwindow.addEventListener('load', () => initSW());\n\ninitSW = () => {\n  if (!navigator.serviceWorker) return;\n\n  navigator.serviceWorker.register('/sw.js').then( () => {\n    console.log('SW is working!');\n  }).catch( () => {\n    console.log('SW reg failed!');\n  });\n}\n\n/**\n * Get current restaurant from page URL.\n */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant, 'default');\n  image.srcset = `${DBHelper.imageUrlForRestaurant(restaurant, 'small')} 325w, ${DBHelper.imageUrlForRestaurant(restaurant, 'medium')} 500w, ${DBHelper.imageUrlForRestaurant(restaurant, '')} 800w`\n  image.sizes = '(min-width: 768px) calc( 100vw / 2 - 100px ), (min-width: 1200px) calc( 100vw / 3 - 100px ), (min-width: 1920px) calc( 100vw / 4 - 100px )';\n  image.alt = `${restaurant.name} Restaurant in ${restaurant.neighborhood}`;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n    row.tabIndex = 0;\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h4');\n  title.innerHTML = 'Reviews';\n  title.tabIndex = 0;\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    noReviews.tabIndex = 0;\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n\n  const name_date = document.createElement('div');\n  name_date.className = \"review-name-date\";\n  name_date.tabIndex = \"0\";\n  li.appendChild(name_date);\n\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  name.className = \"reviewer\";\n  name.tabIndex = \"0\";\n  name_date.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  date.className = \"review-date\";\n  date.tabIndex = \"0\";\n  name_date.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  rating.tabIndex = \"0\";\n  rating.className = \"rating\";\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  comments.tabIndex = \"0\";\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n;window.addEventListener('load', () => initSW());\n\nlet initSW = () => {\n  if (!navigator.serviceWorker) return;\n\n  navigator.serviceWorker.register('/sw.js').then( () => {\n    console.log('SW is working! ----- ');\n  }).catch( () => {\n    console.log('SW reg failed!');\n  });\n}"]}